pipeline {
    environment {
        BUILD_NUMBER = '8'
        GIT_USER_NAME = 'SallyNader'
        DOCKER_IMAGE = "sally94/cicd"
        GIT_REPO_NAME = 'cicd-gitops'
        SONAR_URL = 'http://35.170.201.23:3000'
        GIT_EMAIL = 'sallynaderahmed@gmail.com'
        REGISTRY_CREDENTIALS = credentials('docker-credential')
    }

    agent {
        docker {
            image 'sally94/cicd-maven:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
          
        }
    }

    stages {
        stage('Build') {
            steps {
                dir('spring-boot-app') {
                    sh 'echo ---Build---'
                    sh 'sed -i "s/:v[0-9]/:v${BUILD_NUMBER}/g" src/main/java/com/sally/StartApplication.java'
                    sh 'mvn clean package'
                }
            }
        }
        stage('Test') {
            steps {
                dir('spring-boot-app') {
                    sh 'echo ---Test---'
                    sh 'mvn test'
                }
            }
        }
         stage('Code Analysis') {
            steps {
                dir('spring-boot-app') {
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh 'echo ---Code Analysis---'
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                dir('spring-boot-app') {
                    script {
                        def dockerImage = docker.image("${DOCKER_IMAGE}:v${BUILD_NUMBER}")
                        sh "docker build -t ${DOCKER_IMAGE}:v${BUILD_NUMBER} ."
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-credential') {
                            dockerImage.push()
                        }
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config --global user.email "${GIT_EMAIL}"
                        git config --global user.name "${GIT_USER_NAME}"
                        sed -i "s/:v[0-9]/:v${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                        git add spring-boot-app-manifests/deployment.yml
                        git add spring-boot-app/src/main/java/com/sally/StartApplication.java
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
